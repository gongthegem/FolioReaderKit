---
description: 
globs: 
alwaysApply: false
---
# Rule: Mermaid UML Version Management

This rule defines the process for saving and versioning Mermaid UML diagram Markdown files generated by other rules (like [mermaid_generation.mdc](mdc:.cursor/rules/mermaid_generation.mdc)). It assumes the diagram content and summary are provided as input.

**Instructions:**

1.  **Receive Input:** Assume the Mermaid code block and a summary for the *new* diagram are provided.
2.  **Determine Target File Path:** Identify the standard target Markdown file path **within the `mermaidUML` directory at the project root**. Mirror the main source code structure under `mermaidUML` (e.g., `mermaidUML/Models/Models_UML.md`, `mermaidUML/Services/Services_UML.md`, `mermaidUML/Codebase_Skeleton_UML.md`).
3.  **Check Existence:** Verify if this target file path already exists.
4.  **Handle Existing File (Update Workflow):**
    *   **4.1. Archive Previous Version:** Copy the *existing* target file (e.g., `mermaidUML/Models/Models_UML.md`).
    *   **4.2. Define Archive Name:** Create a name for the archive using the pattern `<StandardName>_v<N>_<BriefDescription>.md` within the *same subdirectory* under `mermaidUML`.
        *   Increment `<N>` based on the latest version found in the existing file's history or existing archive filenames.
        *   `<BriefDescription>` should concisely describe the state *before* the current change (e.g., `InitialWithMapping`, `RefactoredAuthFlow`).
    *   **4.3. Rename Copy:** Rename the copied file to the defined archive name (e.g., `mermaidUML/Models/Models_UML_v2_RefactoredServices.md`).
    *   **4.4. Prepare New Content:** Construct the full content for the *updated standard file* including:
        *   A `## Version History` section (updated to mark the new version as current and reference the archive created in 4.3).
        *   The provided Mermaid code block for the *new* diagram.
        *   The provided summary for the *new* diagram.
        *   Optionally, any flagged potential violations of `core_principles.mdc`.
    *   **4.5. Update Standard File:** Overwrite the standard target file (e.g., `mermaidUML/Models/Models_UML.md`) with the prepared new content.
    *   **4.6. Update Archive File History:** Add/Update the `## Version History` section in the *newly created archive file* (from step 4.3) to accurately reflect its version and point to the now-current standard file.
5.  **Handle New File (Initial Creation Workflow):**
    *   **5.1. Prepare Initial Content:** Construct the full content including:
        *   A `## Version History` section marking this as `v1 (Initial)`.
        *   The provided Mermaid code block.
        *   The provided summary.
        *   Optional violation flags.
    *   **5.2. Create Standard File:** Create the standard target file at the determined path within `mermaidUML` (e.g., `mermaidUML/Models/Models_UML.md`) with the prepared initial content.